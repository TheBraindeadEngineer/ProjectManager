#pragma checksum "E:\projects\ProjectManager\ProjectManager\ProjectManager\Pages\ShowKanban.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "E5B7B4EFE461858413F22CB7AF569CB8E2EBA92C2D6A3B00065E80A2231CE4B9"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using WinRT;

namespace ProjectManager.Pages
{
    partial class ShowKanban : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ShowKanban_obj7_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IShowKanban_Bindings
        {
            private global::ProjectManager.Models.TodoTask dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj7;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj8;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj9;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj10;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj8TextDisabled = false;
            private static bool isobj9TextDisabled = false;
            private static bool isobj10TextDisabled = false;

            public ShowKanban_obj7_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 154 && columnNumber == 56)
                {
                    isobj8TextDisabled = true;
                }
                else if (lineNumber == 156 && columnNumber == 56)
                {
                    isobj9TextDisabled = true;
                }
                else if (lineNumber == 142 && columnNumber == 56)
                {
                    isobj10TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 7: // Pages\ShowKanban.xaml line 129
                        this.obj7 = new global::System.WeakReference(target.As<Microsoft.UI.Xaml.Controls.Grid>());
                        break;
                    case 8: // Pages\ShowKanban.xaml line 154
                        this.obj8 = target.As<Microsoft.UI.Xaml.Controls.TextBlock>();
                        break;
                    case 9: // Pages\ShowKanban.xaml line 156
                        this.obj9 = target.As<Microsoft.UI.Xaml.Controls.TextBlock>();
                        break;
                    case 10: // Pages\ShowKanban.xaml line 142
                        this.obj10 = target.As<Microsoft.UI.Xaml.Controls.TextBlock>();
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = 1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj7.Target as global::Microsoft.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                    case 1:
                        global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj8);
                        global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj9);
                        global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj10);
                        nextPhase = -1;
                        break;
                }
                this.Update_(item.As<ProjectManager.Models.TodoTask>(), 1 << phase);
            }

            public void Recycle()
            {
                global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj8);
                global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj9);
                global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj10);
            }

            // IShowKanban_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = newDataRoot.As<ProjectManager.Models.TodoTask>();
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::ProjectManager.Models.TodoTask obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0) | (1 << 1))) != 0)
                    {
                        this.Update_Deadline(obj.Deadline, phase);
                        this.Update_TaskPriority(obj.TaskPriority, phase);
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Deadline(global::System.DateTime obj, int phase)
            {
                if ((phase & ((1 << 1) | NOT_PHASED )) != 0)
                {
                    // Pages\ShowKanban.xaml line 154
                    if (!isobj8TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj8, obj.ToString(), null);
                    }
                }
            }
            private void Update_TaskPriority(global::ProjectManager.Models.TodoTask.Priority obj, int phase)
            {
                if ((phase & ((1 << 1) | NOT_PHASED )) != 0)
                {
                    // Pages\ShowKanban.xaml line 156
                    if (!isobj9TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj9, obj.ToString(), null);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 1) | NOT_PHASED )) != 0)
                {
                    // Pages\ShowKanban.xaml line 142
                    if (!isobj10TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj10, obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ShowKanban_obj12_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IShowKanban_Bindings
        {
            private global::ProjectManager.Models.TodoTask dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj12;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj13;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj14;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj15;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj13TextDisabled = false;
            private static bool isobj14TextDisabled = false;
            private static bool isobj15TextDisabled = false;

            public ShowKanban_obj12_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 109 && columnNumber == 56)
                {
                    isobj13TextDisabled = true;
                }
                else if (lineNumber == 111 && columnNumber == 56)
                {
                    isobj14TextDisabled = true;
                }
                else if (lineNumber == 97 && columnNumber == 56)
                {
                    isobj15TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 12: // Pages\ShowKanban.xaml line 84
                        this.obj12 = new global::System.WeakReference(target.As<Microsoft.UI.Xaml.Controls.Grid>());
                        break;
                    case 13: // Pages\ShowKanban.xaml line 109
                        this.obj13 = target.As<Microsoft.UI.Xaml.Controls.TextBlock>();
                        break;
                    case 14: // Pages\ShowKanban.xaml line 111
                        this.obj14 = target.As<Microsoft.UI.Xaml.Controls.TextBlock>();
                        break;
                    case 15: // Pages\ShowKanban.xaml line 97
                        this.obj15 = target.As<Microsoft.UI.Xaml.Controls.TextBlock>();
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = 1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj12.Target as global::Microsoft.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                    case 1:
                        global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj13);
                        global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj14);
                        global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj15);
                        nextPhase = -1;
                        break;
                }
                this.Update_(item.As<ProjectManager.Models.TodoTask>(), 1 << phase);
            }

            public void Recycle()
            {
                global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj13);
                global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj14);
                global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj15);
            }

            // IShowKanban_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = newDataRoot.As<ProjectManager.Models.TodoTask>();
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::ProjectManager.Models.TodoTask obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0) | (1 << 1))) != 0)
                    {
                        this.Update_Deadline(obj.Deadline, phase);
                        this.Update_TaskPriority(obj.TaskPriority, phase);
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Deadline(global::System.DateTime obj, int phase)
            {
                if ((phase & ((1 << 1) | NOT_PHASED )) != 0)
                {
                    // Pages\ShowKanban.xaml line 109
                    if (!isobj13TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj.ToString(), null);
                    }
                }
            }
            private void Update_TaskPriority(global::ProjectManager.Models.TodoTask.Priority obj, int phase)
            {
                if ((phase & ((1 << 1) | NOT_PHASED )) != 0)
                {
                    // Pages\ShowKanban.xaml line 111
                    if (!isobj14TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj.ToString(), null);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 1) | NOT_PHASED )) != 0)
                {
                    // Pages\ShowKanban.xaml line 97
                    if (!isobj15TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj15, obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ShowKanban_obj17_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IShowKanban_Bindings
        {
            private global::ProjectManager.Models.TodoTask dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj17;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj18;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj19;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj20;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj18TextDisabled = false;
            private static bool isobj19TextDisabled = false;
            private static bool isobj20TextDisabled = false;

            public ShowKanban_obj17_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 64 && columnNumber == 56)
                {
                    isobj18TextDisabled = true;
                }
                else if (lineNumber == 66 && columnNumber == 56)
                {
                    isobj19TextDisabled = true;
                }
                else if (lineNumber == 52 && columnNumber == 56)
                {
                    isobj20TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 17: // Pages\ShowKanban.xaml line 39
                        this.obj17 = new global::System.WeakReference(target.As<Microsoft.UI.Xaml.Controls.Grid>());
                        break;
                    case 18: // Pages\ShowKanban.xaml line 64
                        this.obj18 = target.As<Microsoft.UI.Xaml.Controls.TextBlock>();
                        break;
                    case 19: // Pages\ShowKanban.xaml line 66
                        this.obj19 = target.As<Microsoft.UI.Xaml.Controls.TextBlock>();
                        break;
                    case 20: // Pages\ShowKanban.xaml line 52
                        this.obj20 = target.As<Microsoft.UI.Xaml.Controls.TextBlock>();
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = 1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj17.Target as global::Microsoft.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                    case 1:
                        global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj18);
                        global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj19);
                        global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj20);
                        nextPhase = -1;
                        break;
                }
                this.Update_(item.As<ProjectManager.Models.TodoTask>(), 1 << phase);
            }

            public void Recycle()
            {
                global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj18);
                global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj19);
                global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj20);
            }

            // IShowKanban_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = newDataRoot.As<ProjectManager.Models.TodoTask>();
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::ProjectManager.Models.TodoTask obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0) | (1 << 1))) != 0)
                    {
                        this.Update_Deadline(obj.Deadline, phase);
                        this.Update_TaskPriority(obj.TaskPriority, phase);
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Deadline(global::System.DateTime obj, int phase)
            {
                if ((phase & ((1 << 1) | NOT_PHASED )) != 0)
                {
                    // Pages\ShowKanban.xaml line 64
                    if (!isobj18TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj18, obj.ToString(), null);
                    }
                }
            }
            private void Update_TaskPriority(global::ProjectManager.Models.TodoTask.Priority obj, int phase)
            {
                if ((phase & ((1 << 1) | NOT_PHASED )) != 0)
                {
                    // Pages\ShowKanban.xaml line 66
                    if (!isobj19TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj19, obj.ToString(), null);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 1) | NOT_PHASED )) != 0)
                {
                    // Pages\ShowKanban.xaml line 52
                    if (!isobj20TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj20, obj, null);
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Pages\ShowKanban.xaml line 29
                {
                    this.ToDoListView = target.As<Microsoft.UI.Xaml.Controls.ListView>();
                }
                break;
            case 3: // Pages\ShowKanban.xaml line 74
                {
                    this.InProgressListView = target.As<Microsoft.UI.Xaml.Controls.ListView>();
                }
                break;
            case 4: // Pages\ShowKanban.xaml line 119
                {
                    this.DoneListView = target.As<Microsoft.UI.Xaml.Controls.ListView>();
                }
                break;
            case 5: // Pages\ShowKanban.xaml line 169
                {
                    global::Microsoft.UI.Xaml.Controls.Button element5 = target.As<Microsoft.UI.Xaml.Controls.Button>();
                    ((global::Microsoft.UI.Xaml.Controls.Button)element5).Click += this.Close_Click;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 7: // Pages\ShowKanban.xaml line 129
                {                    
                    global::Microsoft.UI.Xaml.Controls.Grid element7 = (global::Microsoft.UI.Xaml.Controls.Grid)target;
                    ShowKanban_obj7_Bindings bindings = new ShowKanban_obj7_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element7.DataContext);
                    element7.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element7, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element7, bindings);
                }
                break;
            case 12: // Pages\ShowKanban.xaml line 84
                {                    
                    global::Microsoft.UI.Xaml.Controls.Grid element12 = (global::Microsoft.UI.Xaml.Controls.Grid)target;
                    ShowKanban_obj12_Bindings bindings = new ShowKanban_obj12_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element12.DataContext);
                    element12.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element12, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element12, bindings);
                }
                break;
            case 17: // Pages\ShowKanban.xaml line 39
                {                    
                    global::Microsoft.UI.Xaml.Controls.Grid element17 = (global::Microsoft.UI.Xaml.Controls.Grid)target;
                    ShowKanban_obj17_Bindings bindings = new ShowKanban_obj17_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element17.DataContext);
                    element17.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element17, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element17, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

